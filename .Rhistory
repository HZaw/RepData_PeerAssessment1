merg[arrange(merge, desc(Rank))][13,]
merg <- merge(gdp, edu, by = 'CountryCode')
nrow(merge)
merg[arrange(merg, desc(Rank))][13,]
merg[arrange(merg, desc(Rank))][13, Economy]
arrange(merg, desc(Rank))[13, Economy]
arrange(merg, desc(Rank))[13, "Economy"]
str(merg)
mean(which(merg$ IncomeGroup=="High income:OECD")
mean(which(merg$ Income Group=="High income:OECD"))
mean(which(merg[merg$ Income Group =="High income:OECD"]))
mean(which(merg[merg$ IncomeGroup =="High income:OECD"]))
income <- merg[which(merg$`Income Group`in%in "High income:OECD" & "High income:nonOECD")]
income <- merg[which(merg$`Income Group`== "High income:OECD" & "High income:nonOECD")]
merg$`Income Group [which(High income:OECD)]
merg$Income Group [which(High income:OECD)]
mean [which(High income:OECD)]
clear(function())
0
clear(functions)
clearPushBack(
)
clear()
clearPushBack()
clear(connection)
clearPushBack(
)
rm(function)
clear(mean[which(High income:OECD)])
clear("mean[which(High income:OECD)]")
cat("\f")
save.image("~/Desktop/Getting&CleaningDATA:R/week3/ws.RData")
clear(connection)
clear("connection")
clear(functionBody)
clean(function)
clear(function)
clearPushBack(function)
clearPushBack(connection = mean[which(High income:OECD)])
clear(connection = mean[which(High income:OECD)])
mean [which(High income:OECD)]]
]}
qchisq(p=0.2, df=2, lower.tail=FALSE)
qchisq(p=6.44E-132, df=2, lower.tail=FALSE)
qchisq(p=0.000031, df=2, lower.tail=FALSE)
qchisq(p=3.16E-06, df=1, lower.tail=FALSE)
qchisq(p=6.44E-132, df=1, lower.tail=FALSE)
qchisq(p=1.99E-30, df=1, lower.tail=FALSE)
update.packages()
library(devtools)
install_github(repo="mpMap", user="behuang")
library(mpMap)
library(aod)
library(aods3)
setwd("C:/Users/HZaw/Desktop/Combined_IMapping/IMapping_1027/Imapping")
library(dplyr)
library(stats)
data <- read.table(file="Filtering.hmp.txt", header=F, sep="\", col.names=T )
data1 <- t(data)
str(data)
Filtering <- filter(data,)
?filter
read.tab
qchisq(p=1E-20, df=1, lower.tail=FALSE)
install.packages("~/Downloads/impute_1.48.0.tgz", repos = NULL, type = .Platform$pkgType)
install.packages("~/Desktop/impute_1.48.0.tgz", repos = NULL, type = .Platform$pkgType)
source("https://bioconductor.org/biocLite.R")
biocLite("impute")
install.packages(c("plant", "breeding"))
install.packages("~/Downloads/plantbreeding_1.1.1.tar.gz", repos = NULL, type = "source")
install.packages("plantbreeding", repos="http://R-Forge.R-project.org")
install.packages("plantbreeding", repos="http://R-Forge.R-project.org")
install.packages("reshape")
install.packages("plantbreeding", repos="http://R-Forge.R-project.org")
install.packages("plantbreeding", repos="http://R-Forge.R-project.org")
load("/Users/hein/Desktop/Combined_2ndRun/BN_2ndRun/ws.RData")
load("/Users/hein/Desktop/Combined_2ndRun/BN_2ndRun/ws.RData")
install.packages("GraphKit")
load("/Users/hein/Desktop/Combined_2ndRun/BN_2ndRun/ws.RData")
relevant.nodes = nodes(averaged)[sapply(nodes, degree, object = averaged)>  0]
library(lme4)
library(bnlearn)
library(parallel)
library("Rgraphviz")
relevant.nodes = nodes(averaged)[sapply(nodes, degree, object = averaged)>  0]
averaged2 = subgraph(averaged, relevant.nodes)
strength2 = strength[(strength$from %in% relevant.nodes) &
(strength$to %in% relevant.nodes), ]
strength2
arclist = list()
for (i in seq_along(pr001)) {
# extract the models.
run = pr001[[i]]$models
for (j in seq_along(run))
arclist[[length(arclist) + 1]] = arcs(run[[j]])
}#FOR
nodes = unique(unlist(arclist))
strength = custom.strength(arclist, nodes = nodes)
averaged = averaged.network(strength)
relevant.nodes = nodes(averaged)[sapply(nodes, degree, object = averaged)>  0]
averaged2 = subgraph(averaged, relevant.nodes)
strength2 = strength[(strength$from %in% relevant.nodes) &
(strength$to %in% relevant.nodes), ]
gR = strength.plot(averaged2, strength2, shape = "rectangle", layout = "fdp")
nodeRenderInfo(gR)$fill = "lightblue"
nodeRenderInfo(gR)$fill = "lightblue"
nodeRenderInfo(gR)$col = "darkblue"
nodeRenderInfo(gR)$fill[traits] = "limegreen"
nodeRenderInfo(gR)$col[traits] = "darkgreen"
a = arcs(subgraph(averaged, traits))
a = as.character(interaction(a[, "from"], a[, "to"], sep = "~"))
edgeRenderInfo(gR)$col = "grey"
edgeRenderInfo(gR)$col[a] = "darkgreen"
renderGraph(gR)
strength2
averaged2
?qchisq
qchisq(7.88E-22 , df=1,lower.tail = T)
dchisq(7.88E-22 , df=1,lower.tail = T)
dchisq(7.88E-22 , df=1,lower.tail = F)
qchisq(7.88E-22, df=1,lower.tail = T)
qchisq(p=7.88E-22, df=1,lower.tail = T)
qchisq(p=7.88E-22, df=1,lower.tail = F)
qchisq(p=7.88E-22, df=1,lower.tail = T)
qchisq(p=7.88E-22, df=1,lower.tail = F)
qchisq(p=2.26E-21, df=1,lower.tail = F)
qchisq(p=2.03E-20, df=1,lower.tail = F)
qchisq(p=3.08E-18, df=1,lower.tail = F)
qchisq(p=3.53E-18, df=1,lower.tail = F)
qchisq(p=5.01E-18, df=1,lower.tail = F)
qchisq(p=2.28E-17, df=1,lower.tail = F)
qchisq(p=3.53E-17, df=1,lower.tail = F)
qchisq(p=3.98E-18, df=1,lower.tail = F)
??quantile
??quantile
library(swirl)
swirl()
head(airquality)
xyplot(Ozone~Wind, data=airquality)
xyplot(Ozone~Wind,col="red", pch=8, main ="Big Apple Data" data=airquality)
xyplot(Ozone~Wind,col="red", pch=8, data=airquality)
xyplot(Ozone~Wind,col="red", pch=8, main="Big Apple Data")
xyplot(Ozone~Wind,col="red", pch=8, main="Big Apple Data", data=airquality)
xyplot(Ozone~Wind,data = airquality, col="red", pch=8, main="Big Apple Data")
info()
xyplot(Ozone~Wind,data = airquality, pch=8, col="red", main="Big Apple Data")
xyplot(Ozone~Wind | as.factor(Month),data = airquality)
xyplot(Ozone~Wind | as.factor(Month),data = airquality, layout=c(5,1))
xyplot(Ozone~Wind | Month)
xyplot(Ozone~Wind | Month, data=airquality)
xyplot(Ozone~Wind | Month,data = airquality, layout=c(5,1))
xyplot(Ozone~Wind | Month,data = airquality)
p <- xyplot(Ozone~Wind | Month,data = airquality)
p <- xyplot(Ozone~Wind,data = airquality)
p
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
x
table(f)
xyplot(y~x|f, layout=c(2,1))
v1
v2
myedit("plot1.R")
pathtofile("plot1.R", local=T)
pathtofile("plot1.R", local=TRUE)
pathtofile("plot1.R")
source(pathtofile("plot1.R"),local=TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local=TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color &diamonds$cut)
table(diamonds$color,diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"), local=TRUE)
xyplot(price~carat| color*cut, data="diamonds", strip=FALSE, pch=20, xlab=myxlab, ylab=myylab, main=mymain)
xyplot(price~carat| color*cut, data=diamonds, strip=FALSE, pch=20, xlab=myxlab, ylab=myylab, main=mymain)
xyplot(price~carat| color*cut, data=diamonds, pch=20, xlab=myxlab, ylab=myylab, main=mymain)
library(nlme)
library(lattice)
xyplot(weight~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
p <- xyplot(Ozone~Wind|factor(Month), data=airquality)
library(ggplot2)
library(ggplot2movies)
install.packages("ggplot2movies")
g <- ggplot(movies, aes(votes, rating))
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
str(g)
print(g)
qplot(votes, rating, data =movies)
library(ggplot2)
qplot(votes, rating, data =movies)
qplot(votes, rating, data =movies) + geom_smooth()
data(airquality)
airquality = transform(airquality, Month =factor(Month))
qplot(Wind, Ozone, data=airquality, facets = .~Month)
qplot(Wind, Ozone, data=airquality, facets = .~factor(Month))
trellis.par.set()
??trellis.par.set()
qplot(Wind, Ozone, data=airquality, facets = .~factor(Month))
airquality = transform(airquality, Month =factor(Month))
qplot(Wind, Ozone, data=airquality, facets = .~Month)
source('/Library/Frameworks/R.framework/Versions/3.3/Resources/library/swirl/Courses/Exploratory_Data_Analysis/Lattice_Plotting_System/myLabels.R')
library(swirl)
swirl()
dist(dataFrame)
library(dplyr)
library(R.utils)
source("http://bioconductor.org/biocLite.R")
biocLite("snpStats")
biocLite("rtracklayer")
biocLite("biomaRt")
biocLite("chopsticks")
install.packages(c("plyr","GenABEL","LDheatmap","doParallel","ggplot2", "coin","igraph","devtools"))
library(devtools)
library(doParallel)
install_url("https://cran.r-project.org/src/contrib/Archive/postgwas/postgwas_1.11.tar.gz")
setwd("~/Desktop/Plink2")
data.dir <- setwd("~/Desktop/Plink2")
out.dir <- data.dir
gwas.fn <- lapply(c(bed="bed", bim="bim",fam="fam",gds="gds"), function(n) sprintf("%s/myNB3k.%s", data.dir, n))
gwas.fn <- lapply(c(bed="bed", bim="bim",fam="fam",gds="gds"), function(n) sprintf("%s/3ksubset.%s", data.dir, n))
str(gwas.fn)
gwas.fname <- sprintf("%s/3ksubsetout.txt", out.dir)
library(globals)
library(snpStats)
library(dplyr)
library(data.table)
geno1 <- read.plink(gwas.fn$bed, gwas.fn$bim, gwas.fn$fam, na.strings =("-9"))
str(geno1)
write.table(geno1$fam$pedigree, file="3ksubset.txt", sep="\t", row.names=TRUE)
write.table(geno1$fam$pedigree, file="3ksubset.txt", sep="\t", row.names=FALSE)
data.dir <- setwd("~/Desktop/Plink2")
out.dir <- data.dir
gwas.fn <- lapply(c(bed="bed", bim="bim",fam="fam",gds="gds"), function(n) sprintf("%s/myNB3k.%s", data.dir, n))
str(gwas.fn)
gwas.fname <- sprintf("%s/myNB3k.txt", out.dir)
library(globals)
library(snpStats)
library(dplyr)
library(data.table)
geno1 <- read.plink(gwas.fn$bed, gwas.fn$bim, gwas.fn$fam, na.strings =("-9"))
write.table(geno1$fam$pedigree, file="3k.txt", sep="\t", row.names=FALSE)
setwd("~/Desktop/Reproducible Research")
setwd("~/Desktop/Reproducible Research/RepData_PeerAssessment1")
data <- read.csv("activity.csv")
str(data)
head(data)
data1 <- complete.cases(data$data)
data1 <- data[complete.cases(data$steps),]
data2 <- tapply(data1, data1$date , mean)
data1$date
data2 <- tapply(data1$steps, data1$date , mean)
data2
summary(data2)
hist(data2)
data2 <- tapply(data1$steps, data1$date , sum)
summary(data2)
hist(data2)
data2 <- tapply(data1$steps, data1$date , count)
data2 <- tapply(data1$steps, data1$date , sum)
head(data2)
hist(data2)
??hist
Data <- strptime(gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", Data$interval), format='%H:%M')
Data <- read.csv('activity.csv')
Data <- strptime(gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", Data$interval), format='%H:%M')
head(Data)
tail(Data)
tail(data)
Tsteps <- tapply(Data$steps,Data$date, sum, na.rm=TRUE)
Data1 <- Data[complete.cases(Data),]
Data <- read.csv('activity.csv')
Data1 <- Data[complete.cases(Data),]
Tsteps <- tapply(Data1$steps,Data1$date, sum)
ggplot(Tsteps, aes(x = totalsteps)) +
geom_histogram(fill = "steelblue", binwidth=1000) +
labs(title = "Total Daily Steps", x = "Steps", y = "Frequency")
library(ggplot2)
library(data.table)
library(Hmisc)
install.packages("Hmisc")
ggplot(Tsteps, aes(x = totalsteps)) +
geom_histogram(fill = "steelblue", binwidth=1000) +
labs(title = "Total Daily Steps", x = "Steps", y = "Frequency")
names(Tsteps[2]) <- Totalsteps
Tsteps <- tapply(Data1$steps,Data1$date, sum)
names(Tsteps[2]) <- Totalsteps
names(Tsteps[2]) = Totalsteps
names(Tsteps[2]) <- "Totalsteps"
ggplot(Tsteps, aes(x = )) +
geom_histogram(fill = "steelblue", binwidth=1000) +
labs(title = "Total Daily Steps", x = "Steps", y = "Frequency")
ggplot(Tsteps, aes(x = Totalsteps )) +
geom_histogram(fill = "steelblue", binwidth=1000) +
labs(title = "Total Daily Steps", x = "Steps", y = "Frequency")
ggplot(Tsteps, aes(x = "Totalsteps" )) +
geom_histogram(fill = "steelblue", binwidth=1000) +
labs(title = "Total Daily Steps", x = "Steps", y = "Frequency")
ggplot(Tsteps, aes(x = "Totalsteps" ))
ggplot(Tsteps, aes(x = Totalsteps))
names(Tsteps[1]) <- "Date"
ggplot(Tsteps, aes(x = Totalsteps))
str(Tsteps)
head(Tsteps)
summary(Tsteps)
names(Tsteps[2]) <- "Totalsteps"
names(Tsteps[1]) <- "Date"
ggplot(Tsteps, aes(x = Totalsteps))
head(summary,20)
head(Tsteps,20)
SMTsteps <- summary(Tsteps)
names(SMTsteps[2]) <- "Totalsteps"
names(SMTsteps[1]) <- "Date"
ggplot(Tsteps, aes(x = Totalsteps))
ggplot(SMTsteps, aes(x = Totalsteps))
ggplot(SMTsteps, aes(x = Totalsteps)) + geom_histogram(fill = "steelblue", binwidth=1000)
head(SMTsteps)
head(SMTsteps)
Tsteps <- aggregate(Data1$steps,Data1$date, sum)
Data1 <- Data[complete.cases(Data),]
Tsteps <- aggregate(Data1$steps,Data1$date, sum)
Data <- read.csv('activity.csv')
Data1 <- Data[complete.cases(Data),]
Tsteps <- aggregate(Data1$steps,Data1$date, sum)
Tsteps <- aggregate(steps ~ date , Data1, sum)
names(Tsteps[2]) <- "Totalsteps"
names(Tsteps[1]) <- "Date"
hist(Tsteps,
col = "blue",
main = "Histogram of the (Total Number of (Steps Taken Each Day))",
xlab = "(Total Number of (Steps Taken Each Day))",
breaks = 20
)
head(Tsteps)
names(Tsteps[2]) <- "Totalsteps"
names(Tsteps[1]) <- "Date"
head(Tsteps)
names(Tsteps[1]) <- "Date"
names(Tsteps[2]) <- "Totalsteps"
head(Tsteps)
names(Tsteps)[1] <- "Date"
names(Tsteps)[2] <- "Totalsteps"
head(Tsteps)
hist(Tsteps$Totalsteps,
col = "blue",
main = "Histogram of the (Total Number of (Steps Taken Each Day))",
xlab = "(Total Number of (Steps Taken Each Day))",
breaks = 20
)
hist(Tsteps$Totalsteps,
col = "Red",
main = "Histogram of (Total Number of Steps Taken Each Day)",
xlab = "(Total Number of Steps Taken Each Day)",
breaks = 100
)
hist(Tsteps$Totalsteps,
col = "Red",
main = "Histogram of (Total Number of Steps Taken Each Day)",
xlab = "(Total Number of Steps Taken Each Day)",
breaks = 10
)
hist(Tsteps$Totalsteps,
col = "Red",
main = "Histogram of (Total Number of Steps Taken Per Day)",
xlab = "(Total Number of Steps Taken Each Day)",
breaks = 10
)
mean(Tsteps$Totalsteps)
median(Tsteps$Totalsteps)
Data1 <- Data[complete.cases(Data),]
MData1 <- aggregate(Data1$steps, by=list(Data1$interval), mean)
names(MData1)[1] ="interval"
names(MData1)[2] ="steps"
ggplot(MData1, aes(x = interval, y=steps)) +
labs(title = "Sum of Steps by Interval", x = "interval", y = "steps")+
geom_line(color="red")
ggplot(MData1, aes(x = interval, y=steps)) +
labs(title = "Sum of Steps by Interval", x = "interval", y = "steps")+
geom_line(color="blue")
Interval <- MData1[which.max(MData1$steps),]
Interval
Datamissing <- sum(is.na(Data))
NewData <- Data
NewData <- NewData[complete.cases(baseData2$steps),]
NewData <- NewData[complete.cases(NewData$steps),]
MeanByInterval <- aggregate(NewData$steps, by=list(NewData$interval), sum)
names(MeanByInterval)[1] ="interval"
names(MeanByInterval)[2] ="steps"
Datamissing <- NewData[complete.cases(NewData),]
NewData <- Data
Datamissing <- sum(is.na(NewData))
CleanDatamissing <- NewData[complete.cases(NewData),]
MeanVals <- tapply(CleanDatamissing, CleanDatamissing$interval, mean, na.rm=TRUE, simplify=TRUE)
MeanVals <- tapply(CleanDatamissing$steps, CleanDatamissing$interval, mean, na.rm=TRUE, simplify=TRUE)
NewData$steps[missingData] <- MeanVals[as.character(NewData$interval[missingData])]
NewData$steps[Datamissing] <- MeanVals[as.character(NewData$interval[Datamissing])]
sum(Datamissing)
sum(is.na(NewData$steps))
NewData <- Data
Datamissing <- sum(is.na(NewData))
CleanDatamissing <- NewData[complete.cases(NewData),]
MeanVals <- tapply(CleanDatamissing$steps, CleanDatamissing$interval, mean, na.rm=TRUE, simplify=TRUE)
NewData$steps[Datamissing] <- MeanVals[as.character(NewData$interval[Datamissing])]
sum(Datamissing)
sum(is.na(NewData$steps))
NewData1 <- Data
Datamissing <- sum(is.na(NewData1))
CleanDatamissing <- NewData1[complete.cases(NewData),]
MeanVals <- tapply(CleanDatamissing$steps, CleanDatamissing$interval, mean, na.rm=TRUE, simplify=TRUE)
NewData$steps[Datamissing] <- MeanVals[as.character(NewData1$interval[Datamissing])]
sum(Datamissing)
sum(is.na(NewData1$steps))
NewData1 <- Data
Datamissing <- is.na(NewData1)
CleanDatamissing <- NewData1[complete.cases(NewData),]
MeanVals <- tapply(CleanDatamissing$steps, CleanDatamissing$interval, mean, na.rm=TRUE, simplify=TRUE)
NewData$steps[Datamissing] <- MeanVals[as.character(NewData1$interval[Datamissing])]
sum(Datamissing)
NewData$steps[Datamissing] <- MeanVals[as.character(NewData1$interval[Datamissing])]
NewData1 <- Data
Datamissing <- is.na(NewData1$steps)
CleanDatamissing <- NewData1[complete.cases(NewData),]
MeanVals <- tapply(CleanDatamissing$steps, CleanDatamissing$interval, mean, na.rm=TRUE, simplify=TRUE)
NewData$steps[Datamissing] <- MeanVals[as.character(NewData1$interval[Datamissing])]
sum(Datamissing)
sum(is.na(NewData1$steps))
NewData1 <- Data
Datamissing <- is.na(NewData1$steps)
CleanDatamissing <- NewData1[!is.na(NewData1$steps),]
MeanVals <- tapply(CleanDatamissing$steps, CleanDatamissing$interval, mean, na.rm=TRUE, simplify=TRUE)
NewData$steps[Datamissing] <- MeanVals[as.character(NewData1$interval[Datamissing])]
sum(Datamissing)
sum(is.na(NewData1$steps))
NewData1 <- Data
Datamissing <- is.na(NewData1$steps)
NewData1 <- Data
Datamissing <- is.na(NewData1$steps)
CleanDatamissing <- NewData1[!is.na(NewData1$steps),]
MeanVals <- tapply(CleanDatamissing$steps, CleanDatamissing$interval, mean, na.rm=TRUE, simplify=TRUE)
NewData1$steps[Datamissing] <- MeanVals[as.character(NewData1$interval[Datamissing])]
sum(Datamissing)
sum(is.na(NewData1$steps))
SumDataByDay <- aggregate(NewData1$steps, by=list(NewData1$date), sum)
names(SumDataByDay)[1] ="date"
names(SumDataByDay)[2] ="totalsteps"
head(FullSumData,20)
head(SumDataByDay,20)
ggplot(SumDataByDay, aes(x = totalsteps)) +
geom_histogram(fill = "steelblue", binwidth=1000) +
labs(title = "Total Daily Steps", x = "Steps", y = "Frequency")
ggplot(SumDataByDay, aes(x = totalsteps)) +
geom_histogram(fill = "steelRed", binwidth=1000) +
labs(title = "Total Daily Steps", x = "Steps", y = "Frequency")
ggplot(SumDataByDay, aes(x = totalsteps)) +
geom_histogram(fill = "steelred", binwidth=1000) +
labs(title = "Total Daily Steps", x = "Steps", y = "Frequency")
ggplot(SumDataByDay, aes(x = totalsteps)) +
geom_histogram(fill = "palered", binwidth=1000) +
labs(title = "Total Daily Steps", x = "Steps", y = "Frequency")
ggplot(SumDataByDay, aes(x = totalsteps)) +
geom_histogram(fill = "red", binwidth=1000) +
labs(title = "Total Daily Steps", x = "Steps", y = "Frequency")
ggplot(SumDataByDay, aes(x = totalsteps)) +
geom_histogram(fill = "maroon", binwidth=1000) +
labs(title = "Total Daily Steps", x = "Steps", y = "Frequency")
mean(SumDataByDay$totalsteps)
median(SumDataByDay$totalsteps)
NewData1$weekday <- weekdays(NewData1$date)
NewData$weekday <- weekdays(NewData1$date)
NewData1$weekday <- weekday(NewData1$date)
NewData1$weekday <- weekdays(NewData1$date)
str(NewData1$date)
weekdays
NewData1$weekday <- weekdays("NewData1$date")
NewData1$weekday <- weekdays(as.date(NewData1$date))
NewData1$weekday <- weekdays(as.numeric(NewData1$date))
NewData1$weekday <- weekdays(as.data.frame(NewData1$date))
NewData1$weekday <- weekdays(as.Date.character(NewData1$date))
NewData1$weekend <- ifelse (NewData1$weekday == "Saturday" | NewData1$weekday == "Sunday", "Weekend", "Weekday")
head(NewData1,5)
MeanWEWD <- aggregate(NewData1$steps, by=list(NewData1$weekend, NewData1$interval), mean)
names(MeanWEWD)[1] ="weekend"
names(MeanWEWD)[2] ="interval"
names(MeanWEWD)[3] ="steps"
ggplot(MeanWEWD, aes(x = interval, y=steps, color=weekend)) +
geom_line() +
facet_grid(weekend ~ .) +
labs(title = "Mean of Steps by Interval", x = "interval", y = "steps")
head(MeanWEWD)
ggplot(MeanWEWD, aes(x = interval, y=steps, color=weekend)) +
geom_line() +
facet_grid(weekend ~ .) +
labs(title = "Time Series Plot of the 5-Minute Interval\nand the Average Number of Steps Taken,\nAveraged Across All Weekday Days or Weekend Days", x = "interval", y = "steps")
ggplot(MeanWEWD, aes(x = interval, y=steps, color=weekend)) +
geom_line() +
facet_grid(weekend ~ .) +
labs(title = "Time Series Plot of the 5-Minute Interval\nAveraged Across All Weekday Days or Weekend Days", x = "interval", y = "steps")
knitr::opts_chunk$set(echo = TRUE)
str(Data1)
steps~interval
steps~interval
Data2
Data1 <- Data[complete.cases(Data),]
MData1 <- aggregate(Data1$steps, by=list(Data1$interval), mean)
knit_with_parameters('~/Desktop/Reproducible Research/RepData_PeerAssessment1/Reproducible_Research_Project1_pdf.Rmd')
